# -*- coding: utf-8 -*-
"""SimpleSmsSpamFilter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A1tEBr23m-8Xv_20qkMqKXZrdHUqBuJJ
"""



#connect to google drive
from google.colab import drive
drive.mount('/content/drive')

data_file = '/content/drive/My Drive/SMSSpamCollection.txt'

import pandas as pd
data = pd.read_csv(data_file, sep="\t", header = None, names=["label", "sms"])
data.head()

import string
import nltk
nltk.download('stopwords')
nltk.download('punkt')

stopwords = nltk.corpus.stopwords.words('english')
punctuation = string.punctuation

print(stopwords[:5])
print(punctuation)

def pre_process(sms):
  remove_punct = "".join([word.lower() for word in sms if word not in punctuation])
  tokenize = nltk.tokenize.word_tokenize(remove_punct)
  remove_stopwords = [word for word in tokenize if word not in stopwords]
  return remove_stopwords

data['processed'] = data['sms'].apply(lambda x: pre_process(x))
print(data['processed'].head())

#categorize ham/spam associated words
def categorize_words():
  spam_words=[]
  ham_words=[]
  #handling messages associated with spam
  for sms in data['processed'][data['label']=='spam']:
    for word in sms:
      spam_words.append(word)
  #handling messages associated with ham
  for sms in data['processed'][data['label']=='ham']:
    for word in sms:
      ham_words.append(word)
  return spam_words, ham_words

spam_words, ham_words = categorize_words()

print(spam_words[:5])
print(ham_words[:5])

#predict function
def predict(sms):
  spam_counter = 0
  ham_counter = 0

  for word in sms:
    spam_counter += spam_words.count(word)
    ham_counter += ham_words.count(word)
  print('********************RESULT********************')

  if ham_counter > spam_counter:
    accuracy = round((ham_counter / (ham_counter + spam_counter)*100))
    print('message is not spam, with {}% certainty'.format(accuracy))
  elif ham_counter == ham_counter:
    print('message could be spam')
  else:
    accuracy = round((spam_counter / (ham_counter + spam_counter)*100))
    print('message is spam, with {}% certainty'.format(accuracy))

user_input = input("Please type a spam or ham message to check if our function predicts accurately\n")
processed_input = pre_process(user_input)

predict(processed_input)

